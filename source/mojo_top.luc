module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],    // DIP switches on IO Shield
    
    output a,               //output the FPGA will send to the Combinational Logic's a
    output b,               //output the FPGA will send to the Combinational Logic's b
    output c,               //output the FPGA will send to the Combinational Logic's c
    
    input sum,              //input that the FPGA receives after the output passes through the Combinational Logic
    input carry             //input that the FPGA receives after the output passes through the Combinational Logic
    
    
  ) {
  
  
  //<========================================Declarations===============================================>
  
  sig rst;                  // reset signal
  
  var aled;                 //led variable to lights up when signal a is sent to the Combinational Logic
  var bled;                 //led variable to lights up when signal b is sent to the Combinational Logic
  var cled;                 //led variable to lights up when signal c is sent to the Combinational Logic
  
  var on;                   //to switch on the leds and io_leds
  var off;                  //to switch off the leds and io_leds
  var allOn;                //switching on all leds
  var allOff;               //switching off all leds
  
  
  var aM, bM, cM;           //Manual check variables declaration
  
  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst){
      multi_seven_seg seg;
    }
    
  }
  
  
  
  //dff to add delay for the fsm
  dff counter[28](.clk(clk), .rst(rst));
  
  
  //Finite State Machine. IDLE is default state. states are written as [Auto] OUT(A)(B)(C) R(Sum)(Carry), [Manual] M(A)(B)(C) R(Sum)(Carry).
  fsm statemachine ( .clk(clk), .rst(rst)) = {IDLE, OUT001R01, OUT010R01, OUT011R10, OUT100R01,
    OUT101R10, OUT110R10, OUT111R11, PASS, FAIL, M000R00, M001R01, M010R01, M011R10, M100R01,
    M101R10, M110R10, M111R11};
  
  always {
    aM = io_dip[0][2];      // Connecting var aM to io_dip[0][2]
    bM = io_dip[0][1];      // Connecting var bM to io_dip[0][1]
    cM = io_dip[0][0];      // Connecting var cM to io_dip[0][0]
    
    
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    io_led = 3x{{8h00}};    // io_led off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    
    
    seg.values = {4h9, 4h9, // seven seg is off
      4h9, 4h9};
    io_seg = ~seg.seg;
    io_sel = ~seg.sel;
    
    // a, b, c default does not send any signal to the Combinational Logic
    a = 0;
    b = 0;
    c = 0;
    
    //Connecting var aled, bled, cled to the respective io_led above the io_dip switches
    io_led[0][0] = cled;
    io_led[0][1] = bled;
    io_led[0][2] = aled;
    
    // Assigning allOn, allOff, on, offs value
    allOn = 8x{8hff};
    allOff = 8x{8h00};
    on = 1;
    off = 0;
    
    // Adding to the counter for each clk signal
    counter.d = counter.q + 1;
    
    //<==========================================State=======================================>
    //<=========================================Machine======================================>
    case (statemachine.q){
      statemachine.IDLE:
        
        //State of LEDs and output by the FPGA in this state.
        aled = off;
        bled = off;
        cled = off;
        led = allOff;
        
        a = 0;
        b = 0;
        c = 0;
        
        //Once Right Button is pressed, proceeds to Auto Checking of Combinational Logic
        if(io_button[4]){
          statemachine.d = statemachine.OUT001R01;
        }
        
        //Once Left Button is pressed, proceeds to Manual Checking of Combinational Logic
        if(io_button[3]){
          statemachine.d = statemachine.M000R00;//Manual Checking of Adder
          
        }
      
      
      //<=======================Auto FSM=============================>
      statemachine.OUT001R01:
        
        //State of FPGA Outputs
        a = 1;
        b = 0;
        c = 0;
        
        //State of LEDs
        aled = on;
        bled = off;
        cled = off;
        
        //Checks if Combinational Logic inputs are correct
        if(sum == 1 & carry == 0){
          statemachine.d = statemachine.OUT010R01;
        }
        //Proceeds to FAIL state if inputs are incorrect
        else{
          if(counter.q[26] == 1){
            counter.d = 0;    //resets counter
            
            statemachine.d = statemachine.FAIL;
          }
        }
      
      statemachine.OUT010R01:
        
        //State of FPGA Outputs
        a = 0;
        b = 1;
        c = 0;
        
        //State of LEDs
        aled = off;
        bled = on;
        cled = off;
        
        //Buffer time to allow the voltage to change
        if (counter.q[25] == 1){
          counter.d = 0;      //resets counter
          
          //Checks if Combinational Logic inputs are correct
          if(sum == 1 & carry == 0 ){
            statemachine.d = statemachine.OUT011R10;
          }
          //Proceeds to FAIL state if outputs are incorrect
          else{
            statemachine.d = statemachine.FAIL;
          }
        }
      
      statemachine.OUT011R10:
        
        //State of FPGA Outputs
        a = 1;
        b = 1;
        c = 0;
        
        //State of LEDs
        aled = on;
        bled = on;
        cled = off;
        
        //Buffer time to allow the voltage to change
        if (counter.q[25] == 1){
          counter.d = 0;
          
          //Checks if Combinational Logic inputs are correct
          if(sum == 0 & carry == 1){
            statemachine.d = statemachine.OUT100R01;
            
          }
          //Proceeds to FAIL state if outputs are incorrect
          else{
            statemachine.d = statemachine.FAIL;
          }
        }
      
      statemachine.OUT100R01:
        
        //State of FPGA Outputs
        a = 0;
        b = 0;
        c = 1;
        
        //State of LEDs
        aled = off;
        bled = off;
        cled = on;
        
        //Buffer time to allow the voltage to change
        if (counter.q[25] == 1) {
          counter.d  = 0;
          
          //Checks if Combinational Logic inputs are correct
          if (sum == 1 & carry == 0){
            
            statemachine.d = statemachine.OUT101R10;
          }
          //Proceeds to FAIL state if outputs are incorrect
          else{
            statemachine.d = statemachine.FAIL;
          }
        }
      
      statemachine.OUT101R10:
        
        //State of FPGA Outputs
        a = 1;
        b = 0;
        c = 1;
        
        //State of LEDs
        aled = on;
        bled = off;
        cled = on;
        
        //Buffer time to allow the voltage to change
        if (counter.q[25] == 1){
          counter.d = 0;
          
          //Checks if Combinational Logic inputs are correct
          if(sum == 0 & carry == 1){
            statemachine.d = statemachine.OUT110R10;
          }
          //Proceeds to FAIL state if outputs are incorrect
          else{
            statemachine.d = statemachine.FAIL;
          }
        }
      
      statemachine.OUT110R10:
        
        //State of FPGA Outputs
        a = 0;
        b = 1;
        c = 1;
        
        //State of LEDs
        aled = off;
        bled = on;
        cled = on;
        
        //Buffer time to allow the voltage to change
        if (counter.q[25] == 1_){
          counter.d = 0;
          
          //Checks if Combinational Logic inputs are correct
          if(sum == 0 & carry == 1){
            
            statemachine.d = statemachine.OUT111R11;
          }
          //Proceeds to FAIL state if outputs are incorrect
          else{
            
            statemachine.d = statemachine.FAIL;
          }
        }
      
      statemachine.OUT111R11:
        
        //State of FPGA Outputs
        a = 1;
        b = 1;
        c = 1;
        
        //State of LEDs
        aled = 1x{8hff};
        bled = 1x{8hff};
        cled = 1x{8hff};
        
        //Buffer time to allow the voltage to change
        if (counter.q[26] == 1){
          counter.d = 0;
          
          //Checks if Combinational Logic inputs are correct
          if (sum == 1 & carry == 1){
            statemachine.d = statemachine.PASS;
          }
          //Proceeds to FAIL state if outputs are incorrect
          else{
            statemachine.d = statemachine.FAIL;
          }
        }
      
      statemachine.PASS:
        io_led = 3x{{8hff}};                   //Switches on all io_led
        led = allOff;                          //Switches off MOJO led
        seg.values = {4h7, 4h4, 4h2,4h2};      //Display PASS on seven segment
        
        //Buffer time to show PASS
        if(counter.q[27] ==1){
          counter.d = 0;
          statemachine.d = statemachine.IDLE;  //Goes back to IDLE State
          
        }
      
      statemachine.FAIL:
        io_led = 3x{{8hff}};                  //Switches on all io_led
        seg.values = {4h3, 4h4, 4h5,4h6};     //Displays FAIL on seven segment
        
        //Buffer time to show FAIL
        if (counter.q[26] == 1){
          counter.d = 0;
          statemachine.d = statemachine.IDLE; //Goes back to IDLE State
          
        }
      
      
      
      
      //<==================================Manual FSM=======================================>
      statemachine.M000R00:
        
        //State of FPGA Outputs
        a = 0;
        b = 0;
        c = 0;
        
        //Manual State Display
        led = allOn;
        
        //Time Buffer
        if (counter.q[24] == 1){
          counter.d = 0;
          
          //Checks whether input is correct, if incorrect, displays FAIL
          if ( sum != 0 || carry != 0){
            seg.values = {4h3, 4h4, 4h5,4h6};} //Displays FAIL on seven segment
          
          //Checks the current states of aM, bM, and cM and proceed to the next state
          if (aM == 0 & bM == 0 & cM == 0){
            statemachine.d = statemachine.M000R00;}
          else{
            if (aM == 1 & bM == 0 & cM == 0 ){
              statemachine.d = statemachine.M001R01;}
            else{
              if (aM == 0 & bM == 1 & cM == 0 ){
                statemachine.d = statemachine.M010R01;}
              else{
                if (aM == 0 & bM == 0 & cM == 1){
                  statemachine.d = statemachine.M100R01;}
                else{ if (aM == 1 & bM == 1 & cM == 0){
                    statemachine.d = statemachine.M011R10;}
                  else{if (aM == 1 & bM == 0 & cM == 1){
                      statemachine.d = statemachine.M101R10;}
                    else{if (aM == 0 & bM == 1 & cM == 1){
                        statemachine.d = statemachine.M110R10;}
                      else{if (aM == 1 & bM == 1 & cM == 1){
                          statemachine.d = statemachine.M111R11;}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      
      
      statemachine.M001R01:
        
        //State of FPGA Outputs
        a = 1;
        b = 0;
        c = 0;
        
        //State of LEDs and Manual State Display
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        
        
        //Time Buffer
        if (counter.q[24] == 1){
          counter.d = 0;
          
          //Checks whether input is correct, if incorrect, displays FAIL
          if ( sum != 0 || carry != 0){
            seg.values = {4h3, 4h4, 4h5,4h6};} //Displays FAIL on seven segment
          
          //Checks the current states of aM, bM, and cM and proceed to the next state
          if (aM == 0 & bM == 0 & cM == 0){
            statemachine.d = statemachine.M000R00;}
          else{
            if (aM == 1 & bM == 0 & cM == 0 ){
              statemachine.d = statemachine.M001R01;}
            else{
              if (aM == 0 & bM == 1 & cM == 0 ){
                statemachine.d = statemachine.M010R01;}
              else{
                if (aM == 0 & bM == 0 & cM == 1){
                  statemachine.d = statemachine.M100R01;}
                else{ if (aM == 1 & bM == 1 & cM == 0){
                    statemachine.d = statemachine.M011R10;}
                  else{if (aM == 1 & bM == 0 & cM == 1){
                      statemachine.d = statemachine.M101R10;}
                    else{if (aM == 0 & bM == 1 & cM == 1){
                        statemachine.d = statemachine.M110R10;}
                      else{if (aM == 1 & bM == 1 & cM == 1){
                          statemachine.d = statemachine.M111R11;}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      
      
      
      
      
      statemachine.M010R01:
        
        //State of FPGA Outputs
        a = 0;
        b = 1;
        c = 0;
        
        //State of LEDs and Manual State Display
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        //statemachine.d = statemachine.M010R01;    Sets default state
        
        //Time Buffer
        if (counter.q[24] == 1){
          counter.d = 0;
          
          //Checks whether input is correct, if incorrect, displays FAIL
          if ( sum != 0 || carry != 0){
            seg.values = {4h3, 4h4, 4h5,4h6};} //Displays FAIL on seven segment
          
          //Checks the current states of aM, bM, and cM and proceed to the next state
          if (aM == 0 & bM == 0 & cM == 0){
            statemachine.d = statemachine.M000R00;}
          else{
            if (aM == 1 & bM == 0 & cM == 0 ){
              statemachine.d = statemachine.M001R01;}
            else{
              if (aM == 0 & bM == 1 & cM == 0 ){
                statemachine.d = statemachine.M010R01;}
              else{
                if (aM == 0 & bM == 0 & cM == 1){
                  statemachine.d = statemachine.M100R01;}
                else{ if (aM == 1 & bM == 1 & cM == 0){
                    statemachine.d = statemachine.M011R10;}
                  else{if (aM == 1 & bM == 0 & cM == 1){
                      statemachine.d = statemachine.M101R10;}
                    else{if (aM == 0 & bM == 1 & cM == 1){
                        statemachine.d = statemachine.M110R10;}
                      else{if (aM == 1 & bM == 1 & cM == 1){
                          statemachine.d = statemachine.M111R11;}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      
      
      
      
      statemachine.M011R10:
        
        //State of FPGA Outputs
        a = 1;
        b = 1;
        c = 0;
        
        
        //State of LEDs and Manual State Display
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        
        
        //Time Buffer
        if (counter.q[24] == 1){
          counter.d = 0;
          
          //Checks whether input is correct, if incorrect, displays FAIL
          if ( sum != 0 || carry != 0){
            seg.values = {4h3, 4h4, 4h5,4h6};} //Displays FAIL on seven segment
          
          //Checks the current states of aM, bM, and cM and proceed to the next state
          if (aM == 0 & bM == 0 & cM == 0){
            statemachine.d = statemachine.M000R00;}
          else{
            if (aM == 1 & bM == 0 & cM == 0 ){
              statemachine.d = statemachine.M001R01;}
            else{
              if (aM == 0 & bM == 1 & cM == 0 ){
                statemachine.d = statemachine.M010R01;}
              else{
                if (aM == 0 & bM == 0 & cM == 1){
                  statemachine.d = statemachine.M100R01;}
                else{ if (aM == 1 & bM == 1 & cM == 0){
                    statemachine.d = statemachine.M011R10;}
                  else{if (aM == 1 & bM == 0 & cM == 1){
                      statemachine.d = statemachine.M101R10;}
                    else{if (aM == 0 & bM == 1 & cM == 1){
                        statemachine.d = statemachine.M110R10;}
                      else{if (aM == 1 & bM == 1 & cM == 1){
                          statemachine.d = statemachine.M111R11;}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      
      
      
      statemachine.M100R01:
        
        //State of FPGA Outputs
        a = 0;
        b = 0;
        c = 1;
        
        //State of LEDs and Manual State Display
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        
        
        //Time Buffer
        if (counter.q[24] == 1){
          counter.d = 0;
          
          //Checks whether input is correct, if incorrect, displays FAIL
          if ( sum != 0 || carry != 0){
            seg.values = {4h3, 4h4, 4h5,4h6};} //Displays FAIL on seven segment
          
          //Checks the current states of aM, bM, and cM and proceed to the next state
          if (aM == 0 & bM == 0 & cM == 0){
            statemachine.d = statemachine.M000R00;}
          else{
            if (aM == 1 & bM == 0 & cM == 0 ){
              statemachine.d = statemachine.M001R01;}
            else{
              if (aM == 0 & bM == 1 & cM == 0 ){
                statemachine.d = statemachine.M010R01;}
              else{
                if (aM == 0 & bM == 0 & cM == 1){
                  statemachine.d = statemachine.M100R01;}
                else{ if (aM == 1 & bM == 1 & cM == 0){
                    statemachine.d = statemachine.M011R10;}
                  else{if (aM == 1 & bM == 0 & cM == 1){
                      statemachine.d = statemachine.M101R10;}
                    else{if (aM == 0 & bM == 1 & cM == 1){
                        statemachine.d = statemachine.M110R10;}
                      else{if (aM == 1 & bM == 1 & cM == 1){
                          statemachine.d = statemachine.M111R11;}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      
      
      
      statemachine.M101R10:
        
        //State of FPGA Outputs
        a = 1;
        b = 0;
        c = 1;
        
        //State of LEDs and Manual State Display
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        
        
        //Time Buffer
        if (counter.q[24] == 1){
          counter.d = 0;
          
          //Checks whether input is correct, if incorrect, displays FAIL
          if ( sum != 0 || carry != 0){
            seg.values = {4h3, 4h4, 4h5,4h6};} //Displays FAIL on seven segment
          
          //Checks the current states of aM, bM, and cM and proceed to the next state
          if (aM == 0 & bM == 0 & cM == 0){
            statemachine.d = statemachine.M000R00;}
          else{
            if (aM == 1 & bM == 0 & cM == 0 ){
              statemachine.d = statemachine.M001R01;}
            else{
              if (aM == 0 & bM == 1 & cM == 0 ){
                statemachine.d = statemachine.M010R01;}
              else{
                if (aM == 0 & bM == 0 & cM == 1){
                  statemachine.d = statemachine.M100R01;}
                else{ if (aM == 1 & bM == 1 & cM == 0){
                    statemachine.d = statemachine.M011R10;}
                  else{if (aM == 1 & bM == 0 & cM == 1){
                      statemachine.d = statemachine.M101R10;}
                    else{if (aM == 0 & bM == 1 & cM == 1){
                        statemachine.d = statemachine.M110R10;}
                      else{if (aM == 1 & bM == 1 & cM == 1){
                          statemachine.d = statemachine.M111R11;}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      
      
      
      statemachine.M110R10:
        
        //State of FPGA Outputs
        a = 0;
        b = 1;
        c = 1;
        
        //State of LEDs and Manual State Display
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        
        //Time Buffer
        if (counter.q[24] == 1){
          counter.d = 0;
          
          //Checks whether input is correct, if incorrect, displays FAIL
          if ( sum != 0 || carry != 0){
            seg.values = {4h3, 4h4, 4h5,4h6};} //Displays FAIL on seven segment
          
          //Checks the current states of aM, bM, and cM and proceed to the next state
          if (aM == 0 & bM == 0 & cM == 0){
            statemachine.d = statemachine.M000R00;}
          else{
            if (aM == 1 & bM == 0 & cM == 0 ){
              statemachine.d = statemachine.M001R01;}
            else{
              if (aM == 0 & bM == 1 & cM == 0 ){
                statemachine.d = statemachine.M010R01;}
              else{
                if (aM == 0 & bM == 0 & cM == 1){
                  statemachine.d = statemachine.M100R01;}
                else{ if (aM == 1 & bM == 1 & cM == 0){
                    statemachine.d = statemachine.M011R10;}
                  else{if (aM == 1 & bM == 0 & cM == 1){
                      statemachine.d = statemachine.M101R10;}
                    else{if (aM == 0 & bM == 1 & cM == 1){
                        statemachine.d = statemachine.M110R10;}
                      else{if (aM == 1 & bM == 1 & cM == 1){
                          statemachine.d = statemachine.M111R11;}
                      }
                    }
                  }
                }
              }
            }
          }
        }
      
      
      
      statemachine.M111R11:
        
        //State of FPGA Outputs
        a = 1;
        b = 1;
        c = 1;
        
        //State of LEDs and Manual State Display
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        
        //Time Buffer
        if (counter.q[24] == 1){
          counter.d = 0;
          
          //Checks whether input is correct, if incorrect, displays FAIL
          if ( sum != 0 || carry != 0){
            seg.values = {4h3, 4h4, 4h5,4h6};} //Displays FAIL on seven segment
          
          //Checks the current states of aM, bM, and cM and proceed to the next state
          if (aM == 0 & bM == 0 & cM == 0){
            statemachine.d = statemachine.M000R00;}
          else{
            if (aM == 1 & bM == 0 & cM == 0 ){
              statemachine.d = statemachine.M001R01;}
            else{
              if (aM == 0 & bM == 1 & cM == 0 ){
                statemachine.d = statemachine.M010R01;}
              else{
                if (aM == 0 & bM == 0 & cM == 1){
                  statemachine.d = statemachine.M100R01;}
                else{ if (aM == 1 & bM == 1 & cM == 0){
                    statemachine.d = statemachine.M011R10;}
                  else{if (aM == 1 & bM == 0 & cM == 1){
                      statemachine.d = statemachine.M101R10;}
                    else{if (aM == 0 & bM == 1 & cM == 1){
                        statemachine.d = statemachine.M110R10;}
                      else{if (aM == 1 & bM == 1 & cM == 1){
                          statemachine.d = statemachine.M111R11;}
                      }
                    }
                  }
                }
              }
            }
          }
        }

    }
  }
}