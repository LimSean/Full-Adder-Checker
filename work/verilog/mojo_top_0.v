/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg a,
    output reg b,
    output reg c,
    input sum,
    input carry
  );
  
  
  
  reg rst;
  
  integer aled;
  
  integer bled;
  
  integer cled;
  
  integer on;
  
  integer off;
  
  integer allOn;
  
  integer allOff;
  
  integer aM;
  integer bM;
  integer cM;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  wire [4-1:0] M_ctr_value;
  counter_3 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  
  reg [27:0] M_counter_d, M_counter_q = 1'h0;
  
  
  localparam IDLE_statemachine = 5'd0;
  localparam OUT001R01_statemachine = 5'd1;
  localparam OUT010R01_statemachine = 5'd2;
  localparam OUT011R10_statemachine = 5'd3;
  localparam OUT100R01_statemachine = 5'd4;
  localparam OUT101R10_statemachine = 5'd5;
  localparam OUT110R10_statemachine = 5'd6;
  localparam OUT111R11_statemachine = 5'd7;
  localparam PASS_statemachine = 5'd8;
  localparam FAIL_statemachine = 5'd9;
  localparam M000R00_statemachine = 5'd10;
  localparam M001R01_statemachine = 5'd11;
  localparam M010R01_statemachine = 5'd12;
  localparam M011R10_statemachine = 5'd13;
  localparam M100R01_statemachine = 5'd14;
  localparam M101R10_statemachine = 5'd15;
  localparam M110R10_statemachine = 5'd16;
  localparam M111R11_statemachine = 5'd17;
  
  reg [4:0] M_statemachine_d, M_statemachine_q = IDLE_statemachine;
  
  always @* begin
    M_statemachine_d = M_statemachine_q;
    M_counter_d = M_counter_q;
    
    aM = io_dip[0+2+0-:1];
    bM = io_dip[0+1+0-:1];
    cM = io_dip[0+0+0-:1];
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_seg_values = 16'h9999;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    a = 1'h0;
    b = 1'h0;
    c = 1'h0;
    io_led[0+0+0-:1] = cled;
    io_led[0+1+0-:1] = bled;
    io_led[0+2+0-:1] = aled;
    allOn = 64'hffffffffffffffff;
    allOff = 64'h0000000000000000;
    on = 1'h1;
    off = 1'h0;
    M_counter_d = M_counter_q + 1'h1;
    
    case (M_statemachine_q)
      IDLE_statemachine: begin
        aled = off;
        bled = off;
        cled = off;
        led = allOff;
        a = 1'h0;
        b = 1'h0;
        c = 1'h0;
        if (io_button[4+0-:1]) begin
          M_statemachine_d = OUT001R01_statemachine;
        end
        if (io_button[3+0-:1]) begin
          M_statemachine_d = M000R00_statemachine;
        end
      end
      OUT001R01_statemachine: begin
        a = 1'h1;
        b = 1'h0;
        c = 1'h0;
        aled = on;
        bled = off;
        cled = off;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum == 1'h1 & carry == 1'h0) begin
            M_statemachine_d = OUT010R01_statemachine;
          end else begin
            M_statemachine_d = FAIL_statemachine;
          end
        end
      end
      OUT010R01_statemachine: begin
        a = 1'h0;
        b = 1'h1;
        c = 1'h0;
        aled = off;
        bled = on;
        cled = off;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum == 1'h1 & carry == 1'h0) begin
            M_statemachine_d = OUT011R10_statemachine;
          end else begin
            M_statemachine_d = FAIL_statemachine;
          end
        end
      end
      OUT011R10_statemachine: begin
        a = 1'h1;
        b = 1'h1;
        c = 1'h0;
        aled = on;
        bled = on;
        cled = off;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum == 1'h0 & carry == 1'h1) begin
            M_statemachine_d = OUT100R01_statemachine;
          end else begin
            M_statemachine_d = FAIL_statemachine;
          end
        end
      end
      OUT100R01_statemachine: begin
        a = 1'h0;
        b = 1'h0;
        c = 1'h1;
        aled = off;
        bled = off;
        cled = on;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum == 1'h1 & carry == 1'h0) begin
            M_statemachine_d = OUT101R10_statemachine;
          end else begin
            M_statemachine_d = FAIL_statemachine;
          end
        end
      end
      OUT101R10_statemachine: begin
        a = 1'h1;
        b = 1'h0;
        c = 1'h1;
        aled = on;
        bled = off;
        cled = on;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum == 1'h0 & carry == 1'h1) begin
            M_statemachine_d = OUT110R10_statemachine;
          end else begin
            M_statemachine_d = FAIL_statemachine;
          end
        end
      end
      OUT110R10_statemachine: begin
        a = 1'h0;
        b = 1'h1;
        c = 1'h1;
        aled = off;
        bled = on;
        cled = on;
        if (M_counter_q[25+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum == 1'h0 & carry == 1'h1) begin
            M_statemachine_d = OUT111R11_statemachine;
          end else begin
            M_statemachine_d = FAIL_statemachine;
          end
        end
      end
      OUT111R11_statemachine: begin
        a = 1'h1;
        b = 1'h1;
        c = 1'h1;
        aled = 8'hff;
        bled = 8'hff;
        cled = 8'hff;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          if (sum == 1'h1 & carry == 1'h1) begin
            M_statemachine_d = PASS_statemachine;
          end else begin
            M_statemachine_d = FAIL_statemachine;
          end
        end
      end
      PASS_statemachine: begin
        io_led = 24'hffffff;
        led = allOff;
        M_seg_values = 16'h7422;
        if (M_counter_q[27+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          M_statemachine_d = IDLE_statemachine;
        end
      end
      FAIL_statemachine: begin
        io_led = 24'hffffff;
        M_seg_values = 16'h3456;
        if (M_counter_q[26+0-:1] == 1'h1) begin
          M_statemachine_d = IDLE_statemachine;
          M_counter_d = 1'h0;
        end
      end
      M000R00_statemachine: begin
        a = 1'h0;
        b = 1'h0;
        c = 1'h0;
        led = allOn;
        if (M_counter_q[24+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum != 1'h0 || carry != 1'h0) begin
            M_seg_values = 16'h3456;
          end
          if (aM == 1'h0 & bM == 1'h0 & cM == 1'h0) begin
            M_statemachine_d = M000R00_statemachine;
          end
          if (aM == 1'h1 & bM == 1'h0 & cM == 1'h0) begin
            M_statemachine_d = M001R01_statemachine;
          end
          if (aM == 1'h0 & bM == 1'h1 & cM == 1'h0) begin
            M_statemachine_d = M010R01_statemachine;
          end
          if (aM == 1'h0 & bM == 1'h0 & cM == 1'h1) begin
            M_statemachine_d = M100R01_statemachine;
          end
          if (aM == 1'h1 & bM == 1'h1 & cM == 1'h0) begin
            M_statemachine_d = M011R10_statemachine;
          end
          if (aM == 1'h1 & bM == 1'h0 & cM == 1'h1) begin
            M_statemachine_d = M101R10_statemachine;
          end
          if (aM == 1'h0 & bM == 1'h1 & cM == 1'h1) begin
            M_statemachine_d = M110R10_statemachine;
          end
          if (aM == 1'h1 & bM == 1'h1 & cM == 1'h1) begin
            M_statemachine_d = M111R11_statemachine;
          end
        end
      end
      M001R01_statemachine: begin
        a = 1'h1;
        b = 1'h0;
        c = 1'h0;
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        if (M_counter_q[24+0-:1] == 1'h1) begin
          M_counter_d = 1'h0;
          if (sum != 1'h1 || carry != 1'h0) begin
            M_seg_values = 16'h3456;
          end
          if (aM == 1'h0 & bM == 1'h0 & cM == 1'h0) begin
            M_statemachine_d = M000R00_statemachine;
          end
          if (aM == 1'h1 & bM == 1'h0 & cM == 1'h0) begin
            M_statemachine_d = M001R01_statemachine;
          end
          if (aM == 1'h0 & bM == 1'h1 & cM == 1'h0) begin
            M_statemachine_d = M010R01_statemachine;
          end
          if (aM == 1'h0 & bM == 1'h0 & cM == 1'h1) begin
            M_statemachine_d = M100R01_statemachine;
          end
          if (aM == 1'h1 & bM == 1'h1 & cM == 1'h0) begin
            M_statemachine_d = M011R10_statemachine;
          end
          if (aM == 1'h1 & bM == 1'h0 & cM == 1'h1) begin
            M_statemachine_d = M101R10_statemachine;
          end
          if (aM == 1'h0 & bM == 1'h1 & cM == 1'h1) begin
            M_statemachine_d = M110R10_statemachine;
          end
          if (aM == 1'h1 & bM == 1'h1 & cM == 1'h1) begin
            M_statemachine_d = M111R11_statemachine;
          end
        end
      end
      M010R01_statemachine: begin
        a = 1'h0;
        b = 1'h1;
        c = 1'h0;
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        if (sum != 1'h1 || carry != 1'h0) begin
          M_seg_values = 16'h3456;
        end
        if (aM == 1'h0 & bM == 1'h0 & cM == 1'h0) begin
          M_statemachine_d = M000R00_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h0 & cM == 1'h0) begin
          M_statemachine_d = M001R01_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h1 & cM == 1'h0) begin
          M_statemachine_d = M010R01_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h0 & cM == 1'h1) begin
          M_statemachine_d = M100R01_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h1 & cM == 1'h0) begin
          M_statemachine_d = M011R10_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h0 & cM == 1'h1) begin
          M_statemachine_d = M101R10_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h1 & cM == 1'h1) begin
          M_statemachine_d = M110R10_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h1 & cM == 1'h1) begin
          M_statemachine_d = M111R11_statemachine;
        end
      end
      M011R10_statemachine: begin
        a = 1'h1;
        b = 1'h1;
        c = 1'h0;
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        if (sum != 1'h0 || carry != 1'h1) begin
          M_seg_values = 16'h3456;
        end
        if (aM == 1'h0 & bM == 1'h0 & cM == 1'h0) begin
          M_statemachine_d = M000R00_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h0 & cM == 1'h0) begin
          M_statemachine_d = M001R01_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h1 & cM == 1'h0) begin
          M_statemachine_d = M010R01_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h0 & cM == 1'h1) begin
          M_statemachine_d = M100R01_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h1 & cM == 1'h0) begin
          M_statemachine_d = M011R10_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h0 & cM == 1'h1) begin
          M_statemachine_d = M101R10_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h1 & cM == 1'h1) begin
          M_statemachine_d = M110R10_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h1 & cM == 1'h1) begin
          M_statemachine_d = M111R11_statemachine;
        end
      end
      M100R01_statemachine: begin
        a = 1'h0;
        b = 1'h0;
        c = 1'h1;
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        if (sum != 1'h1 || carry != 1'h0) begin
          M_seg_values = 16'h3456;
        end
        if (aM == 1'h0 & bM == 1'h0 & cM == 1'h0) begin
          M_statemachine_d = M000R00_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h0 & cM == 1'h0) begin
          M_statemachine_d = M001R01_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h1 & cM == 1'h0) begin
          M_statemachine_d = M010R01_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h0 & cM == 1'h1) begin
          M_statemachine_d = M100R01_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h1 & cM == 1'h0) begin
          M_statemachine_d = M011R10_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h0 & cM == 1'h1) begin
          M_statemachine_d = M101R10_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h1 & cM == 1'h1) begin
          M_statemachine_d = M110R10_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h1 & cM == 1'h1) begin
          M_statemachine_d = M111R11_statemachine;
        end
      end
      M101R10_statemachine: begin
        a = 1'h1;
        b = 1'h0;
        c = 1'h1;
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        if (sum != 1'h0 || carry != 1'h1) begin
          M_seg_values = 16'h3456;
        end
        if (aM == 1'h0 & bM == 1'h0 & cM == 1'h0) begin
          M_statemachine_d = M000R00_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h0 & cM == 1'h0) begin
          M_statemachine_d = M001R01_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h1 & cM == 1'h0) begin
          M_statemachine_d = M010R01_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h0 & cM == 1'h1) begin
          M_statemachine_d = M100R01_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h1 & cM == 1'h0) begin
          M_statemachine_d = M011R10_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h0 & cM == 1'h1) begin
          M_statemachine_d = M101R10_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h1 & cM == 1'h1) begin
          M_statemachine_d = M110R10_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h1 & cM == 1'h1) begin
          M_statemachine_d = M111R11_statemachine;
        end
      end
      M110R10_statemachine: begin
        a = 1'h0;
        b = 1'h1;
        c = 1'h1;
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        if (sum != 1'h0 || carry != 1'h1) begin
          M_seg_values = 16'h3456;
        end
        if (aM == 1'h0 & bM == 1'h0 & cM == 1'h0) begin
          M_statemachine_d = M000R00_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h0 & cM == 1'h0) begin
          M_statemachine_d = M001R01_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h1 & cM == 1'h0) begin
          M_statemachine_d = M010R01_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h0 & cM == 1'h1) begin
          M_statemachine_d = M100R01_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h1 & cM == 1'h0) begin
          M_statemachine_d = M011R10_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h0 & cM == 1'h1) begin
          M_statemachine_d = M101R10_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h1 & cM == 1'h1) begin
          M_statemachine_d = M110R10_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h1 & cM == 1'h1) begin
          M_statemachine_d = M111R11_statemachine;
        end
      end
      M111R11_statemachine: begin
        a = 1'h1;
        b = 1'h1;
        c = 1'h1;
        aled = aM;
        bled = bM;
        cled = cM;
        led = allOn;
        if (sum != 1'h1 || carry != 1'h1) begin
          M_seg_values = 16'h3456;
        end
        if (aM == 1'h0 & bM == 1'h0 & cM == 1'h0) begin
          M_statemachine_d = M000R00_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h0 & cM == 1'h0) begin
          M_statemachine_d = M001R01_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h1 & cM == 1'h0) begin
          M_statemachine_d = M010R01_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h0 & cM == 1'h1) begin
          M_statemachine_d = M100R01_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h1 & cM == 1'h0) begin
          M_statemachine_d = M011R10_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h0 & cM == 1'h1) begin
          M_statemachine_d = M101R10_statemachine;
        end
        if (aM == 1'h0 & bM == 1'h1 & cM == 1'h1) begin
          M_statemachine_d = M110R10_statemachine;
        end
        if (aM == 1'h1 & bM == 1'h1 & cM == 1'h1) begin
          M_statemachine_d = M111R11_statemachine;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_statemachine_q <= 1'h0;
    end else begin
      M_statemachine_q <= M_statemachine_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
